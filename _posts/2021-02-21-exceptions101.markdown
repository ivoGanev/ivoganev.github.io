---
layout: post
title:  "Exceptions 101"
date:   2021-02-21 10:46:08 +0000
categories: OOP, function, method, exception, design, Kotlin
---

### Provide required data as argument don't throw an exception.

When you find yourself when writing a function saying that "something is required" try to provide it as an argument before deciding to throw an exception.

Wrong:

{% highlight kotlin %}
// depending on the amount of coins you'll get different surprise
fun getRandomSurprise(coins: Collection<Coin>): Surprise {
    // A surprise costs minimum a golden coin.
    val goldCoin = coins.find { coin -> coin is GoldCoin }
        ?: throw IllegalArgumentException(
            "At least one golden coin is required."
            )
    // consume the coins and..
    // materialize a specific reward
    return Surprise("Materializing..a pecking gorilla.")
}
{% endhighlight %}

Right:

{% highlight kotlin %}
fun getRandomSurprise(
    coin: GoldCoin, 
    extraCoins: Collection<Coin>)
    : Surprise {
    // consume the coins and..
    // materialize a specific reward
    return Surprise("Materializing..a pecking gorilla")

{% endhighlight %}